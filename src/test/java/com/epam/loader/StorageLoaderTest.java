package com.epam.loader;

import com.epam.dao.TraineeDao;
import com.epam.dao.TrainerDao;
import com.epam.dao.TrainingDao;
import com.epam.domain.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.context.event.ContextRefreshedEvent;

import java.lang.reflect.Field;
import java.time.LocalDate;
import java.util.List;
import java.util.Set;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;


import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class StorageLoaderTest {

    private StorageLoader loader;

    @Mock
    private TrainerDao mockTrainerDao;
    @Mock
    private TraineeDao mockTraineeDao;
    @Mock
    private TrainingDao mockTrainingDao;

    private AtomicLong testTrainingIdGenerator;

    private void inject(Object target, String field, Object value) {
        try {
            Field f = target.getClass().getDeclaredField(field);
            f.setAccessible(true);
            f.set(target, value);
        } catch (ReflectiveOperationException e) {
            throw new RuntimeException(e);
        }
    }

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        loader = new StorageLoader(mockTraineeDao, mockTrainerDao, mockTrainingDao);

        testTrainingIdGenerator = new AtomicLong(100);
        inject(loader, "trainingIdGenerator", testTrainingIdGenerator);

    }

    @Test
    void loadsAllCsvsWhenPresent() {
        inject(loader, "trainerFile", "trainers_test.csv");
        inject(loader, "traineeFile", "trainees_test.csv");
        inject(loader, "trainingFile", "trainings_test.csv");


        loader.onApplicationEvent(Mockito.mock(ContextRefreshedEvent.class));
        ArgumentCaptor<Trainer> trainerCaptor = ArgumentCaptor.forClass(Trainer.class);
        verify(mockTrainerDao).create(trainerCaptor.capture());
        Trainer capturedTrainer = trainerCaptor.getValue();
        assertEquals("John", capturedTrainer.getFirstName());
        assertEquals(1L, capturedTrainer.getUserId()); // Assuming trainers_test.csv has user ID 1
        ArgumentCaptor<Trainee> traineeCaptor = ArgumentCaptor.forClass(Trainee.class);
        verify(mockTraineeDao).create(traineeCaptor.capture());
        Trainee capturedTrainee = traineeCaptor.getValue();
        assertEquals(LocalDate.of(1990, 1, 1), capturedTrainee.getDateOfBirth());


        // Verify training loading
        ArgumentCaptor<Training> trainingCaptor = ArgumentCaptor.forClass(Training.class);
        verify(mockTrainingDao).create(trainingCaptor.capture());
        Training capturedTraining = trainingCaptor.getValue();
        assertEquals("Basic Cardio", capturedTraining.getTrainingName()); // From trainings_test.csv
        assertEquals(100L, capturedTraining.getId()); // ID generated by testTrainingIdGenerator
    }

    @Test
    void handlesMissingTrainerFileGracefully() {
        inject(loader, "trainerFile", "no_file.csv");
        inject(loader, "traineeFile", "trainees_test.csv");
        inject(loader, "trainingFile", "trainings_test.csv");


        assertDoesNotThrow(() ->
                loader.onApplicationEvent(Mockito.mock(ContextRefreshedEvent.class)));

        verify(mockTrainerDao, never()).create(any(Trainer.class));
        verify(mockTraineeDao, times(1)).create(any(Trainee.class));
        verify(mockTrainingDao, times(1)).create(any(Training.class));
    }

    @Test
    void incrementsTrainingIdsForMultipleRows() {
        // Inject file paths
        inject(loader, "trainerFile", "trainers_test.csv");
        inject(loader, "traineeFile", "trainees_test.csv");
        inject(loader, "trainingFile", "trainings_two_rows_test.csv"); // This file has two training rows


        loader.onApplicationEvent(Mockito.mock(ContextRefreshedEvent.class));

        ArgumentCaptor<Training> trainingCaptor = ArgumentCaptor.forClass(Training.class);
        verify(mockTrainingDao, times(2)).create(trainingCaptor.capture());

        List<Training> capturedTrainings = trainingCaptor.getAllValues();
        Set<Long> capturedTrainingIds = capturedTrainings.stream()
                .map(Training::getId)
                .collect(Collectors.toSet());

        assertEquals(Set.of(100L, 101L), capturedTrainingIds);

        assertEquals("Basic Cardio", capturedTrainings.get(0).getTrainingName());
        assertEquals("Stretch", capturedTrainings.get(1).getTrainingName());
    }
}